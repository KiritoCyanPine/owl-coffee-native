name: Xcode - Build and Analyze

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  build_and_analyze:
    name: Build and analyse default scheme | test basic application workflow
    runs-on: macos-15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.4.0'

      - name: Build
        env:
          scheme: ${{ 'default' }}
        run: |
          make clean
          make app

      - name: Check File Exist
        id: check_dist
        uses: andstor/file-existence-action@v3
        with:
          files: 'build/Release/Owl Coffee.app'

      - name: Veirfy Build File Exist
        if: steps.check_files.outputs.files_exists == 'false'
        # Only runs if all of the files exists
        run: |
          echo "File does not Exist!"
          exit 1

      - name: Locate .app bundle
        run: |
          # Set the path to your bundle, or discover it
          export APP_BUNDLE=./build/Release/Owl\ Coffee.app
          echo APP_BUNDLE = $APP_BUNDLE
          echo "BUNDLE_PATH=$APP_BUNDLE" >> $GITHUB_ENV

      - name: Check bundle structure
        run: |
          brew install tree
          tree "$BUNDLE_PATH"
          test -f "$BUNDLE_PATH/Contents/Info.plist"
          test -d "$BUNDLE_PATH/Contents/MacOS"
          test -d "$BUNDLE_PATH/Contents/Resources"

      - name: Validate Info.plist
        run: plutil -lint "$BUNDLE_PATH/Contents/Info.plist"

      - name: Check executable permissions
        run: |
          EXEC=Owl\ Coffee 
          ls -l "$BUNDLE_PATH/Contents/MacOS/$EXEC"
          test -x "$BUNDLE_PATH/Contents/MacOS/$EXEC"

      - name: Open App and Spy on Process
        run: |
          open "$BUNDLE_PATH"
          sleep 5 # give it a moment to launch

          # Run lsof and grep for "Owl Coffee.app"
          output="$(lsof | grep "$BUNDLE_PATH")"
          if [ -z "$output" ]; then
            echo "Owl Coffee.app is NOT running."
            exit 1
          else
            echo "Owl Coffee.app is running:"
          fi

      - name: Test Application handling
        run: |
          echo "Emulate Command+D :  should start caffeination with Display"
          osascript <<EOF
          tell application "OwlCoffee" to activate
          delay 0.3
          tell application "System Events" to keystroke "d" using command down
          EOF
          sleep 5 # give it a moment to launch

          output="$(lsof | grep "caffeinate")"
          if [ -z "$output" ]; then
            echo "'caffeination' is NOT running."
            exit 1
          else
            echo "caffeination is running."
          fi

          echo "Emulate Command+A :  should Stop caffeination"
          osascript <<EOF
          tell application "OwlCoffee" to activate
          delay 0.3
          tell application "System Events" to keystroke "a" using command down
          EOF
          sleep 5 # give it a moment to launch

          output="$(lsof | grep "caffeinate")"
          if [ -z "$output" ]; then
            echo "'caffeination' is NOT running."
          else
            echo "caffeination is still running."
            exit 1
          fi

          echo "Emulate Command+C :  should start standard caffeination"
          osascript <<EOF
          tell application "OwlCoffee" to activate
          delay 0.3
          tell application "System Events" to keystroke "c" using command down
          EOF
          sleep 5 # give it a moment to launch

          output="$(lsof | grep "caffeinate")"
          if [ -z "$output" ]; then
            echo "'caffeination' is NOT running."
            exit 1
          else
            echo "caffeination is running."
          fi

          osascript -e 'tell application "Owl Coffee" to quit'
          sleep 5
          output="$(lsof | grep "caffeinate")"
          if [ -z "$output" ]; then
            echo "'caffeination' is NOT running."
          else
            echo "caffeination is still running."
            exit 1
          fi

      # - name: Gatekeeper assessment
      #   run: spctl --assess --type execute --verbose=4 "$BUNDLE_PATH"
